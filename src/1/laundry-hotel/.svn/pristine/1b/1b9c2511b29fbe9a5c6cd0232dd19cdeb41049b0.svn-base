using ETexsys.Common.ExcelHelp;
using ETexsys.IDAL;
using ETexsys.Model;
using ETexsys.WebApplication.Areas.Report.Models;
using ETexsys.WebApplication.Common;
using Microsoft.Practices.Unity;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Infrastructure;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Web;
using System.Web.Mvc;

namespace ETexsys.WebApplication.Areas.Report.Controllers
{
    [Authorize(Roles = "Sys_User")]
    [AddressUrl]
    public class TextileController : Controller
    {
        [Dependency]
        public IRepository<textile> i_textile { get; set; }

        [Dependency]
        public IRepository<brandtype> i_brandtype { get; set; }

        [Dependency]
        public IRepository<textileclass> i_textileclass { get; set; }

        // GET: Report/Textile
        //布草分布表
        public ActionResult TextileDistribution()
        {
            ViewBag.time = DateTime.Now.ToString("yyyy-MM-dd");

            List<textile> list= i_textile.Entities.ToList();
            var l = from t in list
                    group t by new { t.BrandID };
            ViewBag.Bid = l.Count() == 1 ? l.First().Key.BrandID : 0;
            return View();
        }
        //  /Report/Textile/Index
        #region
        public ActionResult TextileQuery(int brandId)
        {
            DataTable dt=new DataTable();
            dynamic ttl=null;
            if (brandId > 0)
            {
                #region 单个品牌

                //酒店
                string sql1 = string.Format(@"SELECT
                                GROUP_CONCAT(CONCAT('SUM(IF(classname=''',classname,'''',',result,0)) AS ',classname)
                                ) INTO @EE FROM TextileClass tc where IsDelete=0 ORDER BY tc.Sort,tc.ClassName;
                                SET @QQ=CONCAT('SELECT name as 位置,SUM(result) AS 合计,',LEFT(@EE,LENGTH(@EE)-1),' FROM (select r.regionName as name,tc.ClassName,count(t.ClassID) as result 
                                from textile t left join region r  on t.HotelID=r.ID
                                left join textileclass tc on tc.ID=t.ClassID where t.IsFlag=1 AND T.TextileState in(2,9) and t.BrandID={0} and  RegisterTime<=\'{1}\' and tc.IsDelete=0  GROUP BY  r.id,r.regionName,tc.ClassName  ORDER BY r.Sort,r.regionName) as a GROUP BY name');
                                PREPARE stmt2 FROM @QQ;
                                EXECUTE stmt2;", brandId, DateTime.Now.ToString("yyyy-MM-dd"));
                //仓库
                string sql2 = string.Format(@"SELECT
                                GROUP_CONCAT(CONCAT('SUM(IF(classname=''',classname,'''',',result,0)) AS ',classname)
                                ) INTO @EE FROM TextileClass tc where IsDelete=0 ORDER BY tc.Sort,tc.ClassName;
                                SET @QQ=CONCAT('SELECT name as 位置,SUM(result) AS 合计,',LEFT(@EE,LENGTH(@EE)-1),' FROM (select r.regionName as name,tc.ClassName,count(t.ClassID) as result 
                                from textile t left join region r  on t.RegionID=r.ID
                                left join textileclass tc on tc.ID=t.ClassID where t.IsFlag=1 AND T.TextileState in(0,3) and t.BrandID={0} and  RegisterTime<=\'{1}\' and tc.IsDelete=0  GROUP BY  r.id,r.regionName,tc.ClassName ORDER BY r.Sort,r.regionName) as a GROUP BY name');
                                PREPARE stmt2 FROM @QQ;
                                EXECUTE stmt2;", brandId, DateTime.Now.ToString("yyyy-MM-dd"));
                //工厂内部
                string sql3 = string.Format(@"SELECT
                                    GROUP_CONCAT(CONCAT('SUM(IF(classname=''',classname,'''',',result,0)) AS ',classname)
                                    ) INTO @EE FROM TextileClass tc where IsDelete=0 ORDER BY tc.Sort,tc.ClassName;
                                    SET @QQ=CONCAT('SELECT name as 位置,SUM(result) AS 合计,',LEFT(@EE,LENGTH(@EE)-1),' FROM 
                                    (select \'工厂内部\' AS name,tc.ClassName,count(t.ClassID) as result 
                                    from textile t left join textileclass tc on tc.ID=t.ClassID 
                                    where t.IsFlag=1 AND T.TextileState not in(0,3,2,9) and t.BrandID={0} and  RegisterTime<=\'{1}\' and tc.IsDelete=0
                                    GROUP BY  tc.Sort,tc.ClassName ORDER BY   tc.Sort,tc.ClassName) as a GROUP BY name');
                                    PREPARE stmt2 FROM @QQ;
                                    EXECUTE stmt2;", brandId, DateTime.Now.ToString("yyyy-MM-dd"));

                List<textileclass> tl = i_textileclass.Entities.Where(b=>b.IsDelete==false).OrderBy(b=>b.Sort).ThenBy(b => b.ClassName).ToList();

                List<C_PropertyItem> lp = new List<C_PropertyItem>()
                {
                    new C_PropertyItem("位置",typeof(string)),
                    new C_PropertyItem("合计",typeof(int?))
                };
                tl.ForEach(t =>
                {
                    C_PropertyItem p = new C_PropertyItem(t.ClassName, typeof(string));
                    lp.Add(p);
                });

                //总合
                string sql = string.Format(@"SELECT
                            GROUP_CONCAT(CONCAT('SUM(IF(classname=''',classname,'''',',result,0)) AS ',classname)
                            ) INTO @EE FROM TextileClass tc where  IsDelete=0;
                            SET @QQ=CONCAT('SELECT ifnull(name,\'合计\') as 位置,SUM(result) AS 合计,',LEFT(@EE,LENGTH(@EE)-1),' 
                            FROM (select bt.BrandName as name,tc.ClassName,count(t.ClassID) as result from textile t left join brandtype bt  on t.BrandID=bt.ID
                            left join textileclass tc on tc.ID=t.ClassID where t.IsFlag=1 and  t.brandid={0} and tc.IsDelete=0  and  RegisterTime<=\'{1}\'  GROUP BY  bt.id,bt.BrandName,tc.ClassName ORDER BY   tc.Sort,tc.ClassName) as a GROUP BY name WITH ROLLUP');
                            PREPARE stmt2 FROM @QQ;
                            EXECUTE stmt2;", brandId, DateTime.Now.ToString("yyyy-MM-dd"));

                laundry_hotelEntities entities = new laundry_hotelEntities();
                //酒店
                ttl = entities.Database.SqlQuery(C_TextileTypeFactory.GetTextileType(lp), sql1, "");
                //仓库
                dynamic ttl2 = entities.Database.SqlQuery(C_TextileTypeFactory.GetTextileType(lp), sql2, "");
                //工厂内部
                dynamic ttl3 = entities.Database.SqlQuery(C_TextileTypeFactory.GetTextileType(lp), sql3, "");
                //总数
                dynamic ttl4 = entities.Database.SqlQuery(C_TextileTypeFactory.GetTextileType(lp), sql, "");
                List<dynamic> list = new List<dynamic>();
                list.Add(ttl); list.Add(ttl2); list.Add(ttl3); list.Add(ttl4);
                return Json(list, JsonRequestBehavior.DenyGet);
                #endregion
            }
            else
            {
                #region 多个品牌
                string sql =string.Format(@"SELECT
                            GROUP_CONCAT(CONCAT('SUM(IF(classname=''',classname,'''',',result,0)) AS ',classname)
                            ) INTO @EE FROM TextileClass tc where IsDelete=0;
                            SET @QQ=CONCAT('SELECT ifnull(name,\'合计\') as 流通品牌,id,SUM(result) AS 合计,',LEFT(@EE,LENGTH(@EE)-1),' 
                            FROM (select bt.id as id,bt.BrandName as name,tc.ClassName,count(t.ClassID) as result from textile t left join brandtype bt  on t.BrandID=bt.ID
                            left join textileclass tc on tc.ID=t.ClassID where t.IsFlag=1 and tc.IsDelete=0 and RegisterTime<=\'{0}\'  GROUP BY  bt.id,bt.BrandName,tc.ClassName order by bt.Sort,bt.BrandName) as a GROUP BY name WITH ROLLUP');
                            PREPARE stmt2 FROM @QQ;
                            EXECUTE stmt2;", DateTime.Now.ToString("yyyy-MM-dd"));


                List<textileclass> tl= i_textileclass.Entities.Where(b=>b.IsDelete==false).OrderBy(b => b.Sort).ThenBy(b=>b.ClassName).ToList();
                
                
                List<C_PropertyItem> lp = new List<C_PropertyItem>()
                {
                    new C_PropertyItem("Id",typeof(int)),
                    new C_PropertyItem("流通品牌",typeof(string)),
                    new C_PropertyItem("合计",typeof(int))
                };
                tl.ForEach(t =>
                {
                    C_PropertyItem p = new C_PropertyItem(t.ClassName,typeof(string));
                    lp.Add(p);
                });
                laundry_hotelEntities entities = new laundry_hotelEntities();
                ttl = entities.Database.SqlQuery(C_TextileTypeFactory.GetTextileType(lp), sql,"");
                return Json(ttl,JsonRequestBehavior.DenyGet);
                #endregion
            }
        }
        #endregion
        //租赁布草洗涤次数分析表																						
        public ActionResult TextileWashtimes()
        {
            List<brandtype> BrandList = i_brandtype.Entities.Where(v => v.IsDelete == false).OrderBy(v => v.Sort).ThenBy(v => v.BrandName).ToList();
            ViewData["BrandList"] = BrandList;

            ViewBag.time = DateTime.Now.ToString("yyyy-MM-dd");
            return View();
        }
        public ActionResult TextileWashtimesQuery(int brandId, string Washtimes)
        {
            dynamic ttl = null;

            List<string> l = new List<string>();
            l.Add("品名"); l.Add("0次"); l.Add("1-20次"); l.Add("21-40次"); l.Add("41-60次"); l.Add("61-80次");
            l.Add("81-100次"); l.Add("101-120次"); l.Add("121-140次"); l.Add("140次以上");
            l.Add("最小洗涤次数"); l.Add("最大洗涤次数"); l.Add("平均已洗涤次数"); l.Add("预计寿命");

            List<C_PropertyItem> pis = new List<C_PropertyItem>()
            {
                new C_PropertyItem("品名",typeof(string))
            };

            l.ForEach(t =>
            {
                if (t != "品名")
                {
                    C_PropertyItem pi = new C_PropertyItem(t, typeof(int?));
                    pis.Add(pi);
                }
            });
            if (brandId > 0)
            {
                #region 单个品牌
                StringBuilder sb = new StringBuilder();
                sb.Append(string.Format(@"select c.ClassName as '品名',
                            sum(case when Washtimes=0  then 1 else 0 end) as '0次',
                            sum(case when Washtimes > 0 and Washtimes <= 20 then 1 else 0 end) as '1-20次',
                            sum(case when Washtimes > 20 and Washtimes <= 40 then 1 else 0 end) as '21-40次',
                            sum(case when Washtimes > 40 and Washtimes <= 60 then 1 else 0 end) as '41-60次',
                            sum(case when washtimes > 60 and Washtimes <= 80 then 1 else 0 end) as '61-80次',
                            sum(case when Washtimes > 80 and Washtimes <= 100 then 1 else 0 end) as '81-100次',
                            sum(case when Washtimes > 100 and Washtimes <= 120 then 1 else 0 end) as '101-120次',
                            sum(case when Washtimes > 120 and Washtimes <= 140 then 1 else 0 end) as '121-140次',
                            sum(case when Washtimes > 140  then 1 else 0 end) as '140次以上',
                            case when  min(Washtimes)=0 then Washtimes else min(Washtimes) end as '最小洗涤次数',
                            max(Washtimes) as '最大洗涤次数',
                            sum(Washtimes)/count(t.id) as '平均已洗涤次数',
                            sum(c.ClassLeft-Washtimes) as '预计寿命'
                            from textile as t left join textileclass as c on t.ClassID = c.ID left join Inventory as it on t.RegionID=it.RegionID where IsFlag = 1 and t.BrandID={0} and  RegisterTime<='{1}' and c.IsDelete=0", brandId, DateTime.Now.ToString("yyyy-MM-dd")));

                if (Washtimes == "0")
                {
                    sb.Append(" group by c.ClassName,ClassLeft order by c.Sort,c.ClassName");
                }
                else
                {
                    if (Washtimes== "140次以上")
                    {
                        sb.Append(" and Washtimes>=140");
                    }
                    else
                    {
                        string[] str = Washtimes.Split('-');
                        sb.Append(string.Format(" and Washtimes>={0} and Washtimes<={1} ", int.Parse(str[0]),int.Parse(str[1])));
                    }
                    sb.Append(" group by c.ClassName,ClassLeft order by c.Sort,c.ClassName");
                }

                laundry_hotelEntities entities = new laundry_hotelEntities();
                ttl = entities.Database.SqlQuery(C_TextileTypeFactory.GetTextileType(pis), sb.ToString(), "");

                #endregion
            }
            else
            {
                #region 多个品牌

                StringBuilder sb = new StringBuilder();
                sb.Append(string.Format(@"select c.ClassName as '品名',
                            sum(case when Washtimes=0  then 1 else 0 end) as '0次',
                            sum(case when Washtimes > 0 and Washtimes <= 20 then 1 else 0 end) as '1-20次',
                            sum(case when Washtimes > 20 and Washtimes <= 40 then 1 else 0 end) as '21-40次',
                            sum(case when Washtimes > 40 and Washtimes <= 60 then 1 else 0 end) as '41-60次',
                            sum(case when washtimes > 60 and Washtimes <= 80 then 1 else 0 end) as '61-80次',
                            sum(case when Washtimes > 80 and Washtimes <= 100 then 1 else 0 end) as '81-100次',
                            sum(case when Washtimes > 100 and Washtimes <= 120 then 1 else 0 end) as '101-120次',
                            sum(case when Washtimes > 120 and Washtimes <= 140 then 1 else 0 end) as '121-140次',
                            sum(case when Washtimes > 140  then 1 else 0 end) as '140次以上',
                            case when  min(Washtimes)=0 then Washtimes else min(Washtimes) end as '最小洗涤次数',
                            max(Washtimes) as '最大洗涤次数',
                            sum(Washtimes)/count(t.id) as '平均已洗涤次数',
                            sum(c.ClassLeft-Washtimes) as '预计寿命'
                            from textile as t left join textileclass as c on t.ClassID = c.ID left join Inventory as it on t.RegionID=it.RegionID  where IsFlag = 1 and c.IsDelete=0"));

                if (Washtimes == "0")
                {
                    sb.Append(" group by c.ClassName,ClassLeft order by c.Sort,c.ClassName");
                }
                else
                {
                    if (Washtimes == "140次以上")
                    {
                        sb.Append(" and Washtimes>=140");
                    }
                    else
                    {
                        string[] str = Washtimes.Split('-');
                        sb.Append(string.Format(" and Washtimes>={0} and Washtimes<={1}", int.Parse(str[0]), int.Parse(str[1])));
                    }
                    sb.Append(" group by c.ClassName,ClassLeft order by c.Sort,c.ClassName");
                }
                laundry_hotelEntities entities = new laundry_hotelEntities();
                ttl = entities.Database.SqlQuery(C_TextileTypeFactory.GetTextileType(pis), sb.ToString(), "");
                #endregion
            }
            return Json(ttl,JsonRequestBehavior.DenyGet);
        }
      //租赁布草剩余价值分析表
        public ActionResult TextileSurplus()
        {
            List<brandtype> BrandList = i_brandtype.Entities.Where(v => v.IsDelete == false).OrderBy(v => v.Sort).ThenBy(v => v.BrandName).ToList();
            ViewData["BrandList"] = BrandList;

            ViewBag.time = DateTime.Now.ToString("yyyy-MM-dd");
            return View();
        }
        public ActionResult TextileSurplusQuery(int brandId, string Washtimes)
        {
            dynamic ttl = null;

            List<string> l = new List<string>();
            l.Add("品名"); l.Add("140次以上"); l.Add("121-140次"); l.Add("101-120次");
            l.Add("81-100次"); l.Add("61-80次"); l.Add("41-60次"); l.Add("21-40次");
            l.Add("1-20次");l.Add("0次"); 
            l.Add("最小剩余"); l.Add("最大剩余"); l.Add("平均剩余"); l.Add("预计寿命");l.Add("超出寿命");

            List<C_PropertyItem> pis = new List<C_PropertyItem>()
            {
                new C_PropertyItem("品名",typeof(string))
            };

            l.ForEach(t =>
            {
                if (t != "品名")
                {
                    C_PropertyItem pi = new C_PropertyItem(t, typeof(int?));
                    pis.Add(pi);
                }
            });
            if (brandId > 0)
            { 
                #region 单个品牌
                StringBuilder sb = new StringBuilder();
                sb.Append(string.Format(@"select c.ClassName as '品名',
                            sum(case when c.ClassLeft-Washtimes >140 then 1 else 0 end) as '140次以上',  
                            sum(case when c.ClassLeft-Washtimes >120 and  c.ClassLeft-Washtimes <=140 then 1 else 0 end) as '121-140次',
                            sum(case when c.ClassLeft-Washtimes >100 and  c.ClassLeft-Washtimes <=120 then 1 else 0 end) as '101-120次',
                            sum(case when c.ClassLeft-Washtimes >80 and  c.ClassLeft-Washtimes <=100 then 1 else 0 end) as '81-100次',
                            sum(case when c.ClassLeft-Washtimes >60 and  c.ClassLeft-Washtimes <=80 then 1 else 0 end) as '61-80次',
							sum(case when c.ClassLeft-Washtimes >40 and  c.ClassLeft-Washtimes <=60 then 1 else 0 end) as '41-60次',
                            sum(case when c.ClassLeft-Washtimes >20 and  c.ClassLeft-Washtimes <=40 then 1 else 0 end) as '21-40次',
                            sum(case when c.ClassLeft-Washtimes >0 and  c.ClassLeft-Washtimes <=20 then 1 else 0 end) as '1-20次' ,
                            sum(case when c.ClassLeft-Washtimes=0 then 1 else 0 end) as '0次',
                            min(c.ClassLeft-Washtimes) as '最小剩余',
                            max(c.ClassLeft-Washtimes) as '最大剩余',
                            (sum(c.ClassLeft-Washtimes))/count(t.id) as '平均剩余',
                            sum(c.ClassLeft-Washtimes) as '预计寿命',
                            case  when sum(c.ClassLeft)-sum(Washtimes)>0 then 0 else sum(Washtimes)-sum(c.ClassLeft) end as '超出寿命'
                            from textile as t left join textileclass as c on t.ClassID = c.ID left join Inventory as it on t.RegionID=it.RegionID where IsFlag = 1 and BrandID={0} and RegisterTime<='{1}' and c.IsDelete=0", brandId, DateTime.Now.ToString("yyyy-MM-dd")));

                if (Washtimes == "0")
                {
                    sb.Append(" group by c.ClassName,ClassLeft order by c.Sort,c.ClassName");
                }
                else
                {
                    if (Washtimes == "140次以上")
                    {
                        sb.Append(" and c.ClassLeft-Washtimes>=140");
                    }
                    else
                    {
                        string[] str = Washtimes.Split('-');
                        sb.Append(string.Format(" and c.ClassLeft-Washtimes>={0} and c.ClassLeft-Washtimes<={1}", int.Parse(str[0]), int.Parse(str[1])));
                    }
                    sb.Append(" group by c.ClassName,ClassLeft order by c.Sort,c.ClassName");
                }
                laundry_hotelEntities entities = new laundry_hotelEntities();
                ttl = entities.Database.SqlQuery(C_TextileTypeFactory.GetTextileType(pis), sb.ToString(), "");
                #endregion
            }
            else
            {
                #region 多个品牌
                StringBuilder sb = new StringBuilder();
                sb.Append(string.Format(@"select c.ClassName as '品名',
                            sum(case when c.ClassLeft-Washtimes >140 then 1 else 0 end) as '140次以上', 
                            sum(case when c.ClassLeft-Washtimes >120 and  c.ClassLeft-Washtimes <=140 then 1 else 0 end) as '121-140次',
                            sum(case when c.ClassLeft-Washtimes >100 and  c.ClassLeft-Washtimes <=120 then 1 else 0 end) as '101-120次',
                            sum(case when c.ClassLeft-Washtimes >80 and  c.ClassLeft-Washtimes <=100 then 1 else 0 end) as '81-100次',
                            sum(case when c.ClassLeft-Washtimes >60 and  c.ClassLeft-Washtimes <=80 then 1 else 0 end) as '61-80次',
                            sum(case when c.ClassLeft-Washtimes >40 and  c.ClassLeft-Washtimes <=60 then 1 else 0 end) as '41-60次',
                            sum(case when c.ClassLeft-Washtimes >20 and  c.ClassLeft-Washtimes <=40 then 1 else 0 end) as '21-40次',
                            sum(case when c.ClassLeft-Washtimes >0 and  c.ClassLeft-Washtimes <=20 then 1 else 0 end) as '1-20次' ,
                            sum(case when c.ClassLeft-Washtimes=0 then 1 else 0 end) as '0次' ,
                            min(c.ClassLeft-Washtimes) as '最小剩余',
                            max(c.ClassLeft-Washtimes) as '最大剩余',
                            (sum(c.ClassLeft-Washtimes))/count(t.id) as '平均剩余',
                            sum(c.ClassLeft-Washtimes) as '预计寿命',
                            case  when sum(c.ClassLeft)-sum(Washtimes)>0 then 0 else sum(Washtimes)-sum(c.ClassLeft) end as '超出寿命'
                            from textile as t left join textileclass as c on t.ClassID = c.ID left join Inventory as it on t.RegionID=it.RegionID where IsFlag = 1 and RegisterTime<='{0}' and c.IsDelete=0", DateTime.Now.ToString("yyyy-MM-dd")));

                if (Washtimes == "0")
                {
                    sb.Append(" group by c.ClassName,ClassLeft order by c.Sort,c.ClassName");
                }
                else
                {
                    if (Washtimes == "140次以上")
                    {
                        sb.Append(" and  c.ClassLeft-Washtimes>=140");
                    }
                    else
                    {
                        string[] str = Washtimes.Split('-');
                        sb.Append(string.Format(" and c.ClassLeft-Washtimes>={0} and c.ClassLeft-Washtimes<={1}", int.Parse(str[0]), int.Parse(str[1])));
                    }
                    sb.Append(" group by c.ClassName,ClassLeft order by c.Sort,c.ClassName");
                }
                laundry_hotelEntities entities = new laundry_hotelEntities();
                ttl = entities.Database.SqlQuery(C_TextileTypeFactory.GetTextileType(pis), sb.ToString(), "");
                #endregion
            }
            return Json(ttl,JsonRequestBehavior.DenyGet);
        }
        #region Excel 导出

        public FileResult SingleExportExcel(FormCollection f)
        {
            string title = f["hddTitle"];
            string data = f["hddData"];
            string condition = f["hddCondition"];
            int px = int.Parse(f["hddpx"]);

            List<ExcelTableModel> list = new List<ExcelTableModel>();
            ExcelTableModel table = new ExcelTableModel();
            table.Title = title;
            table.SheetName = title;
            table.Condition = condition.Split('|').ToList();
            table.ContentTable = JSONTable.ToDataTable(data);
            List<ExcelTableColumnModel> colList = new List<ExcelTableColumnModel>();
            ExcelTableColumnModel colModel = null;

            for (int i = 0; i < table.ContentTable.Columns.Count; i++)
            {
                if (i < px)
                {
                    colModel = new ExcelTableColumnModel();
                    colModel.Height = 34;
                    colModel.Width = 150;
                    colModel.HeaderText = table.ContentTable.Columns[i].Caption;
                    colModel.ColumnAlignment = ColumnAlignments.Left;
                }
                else
                {
                    colModel = new ExcelTableColumnModel();
                    colModel.Height = 34;
                    colModel.Width = 80;
                    colModel.HeaderText = table.ContentTable.Columns[i].Caption;
                    colModel.ColumnAlignment = ColumnAlignments.Right;
                }
                colList.Add(colModel);
            }
            table.Column = colList;

            list.Add(table);

            MemoryStream ms = ExcelRender.RenderToExcel(list);

            return File(ms, "application/ms-excel", title + ".xls");
        }

        public FileResult Receive_SendExportExcel(FormCollection f)
        {
            string title = f["hddTitle"];
            string data = f["hddData"];
            string condition = f["hddCondition"];
            int px = int.Parse(f["hddpx"]);

            List<ExcelTableModel> list = new List<ExcelTableModel>();
            ExcelTableModel table = new ExcelTableModel();
            table.Title = title;
            table.SheetName = title;
            table.Condition = condition.Split('|').ToList();
            table.ContentTable = JSONTable.ToDataTable(data);
            List<ExcelTableColumnModel> colList = new List<ExcelTableColumnModel>();
            ExcelTableColumnModel colModel = null;

            for (int i = 0; i < table.ContentTable.Columns.Count; i++)
            {
                if (i < 3)
                {
                    colModel = new ExcelTableColumnModel();
                    colModel.Height = 34;
                    colModel.Width = 100;
                    colModel.HeaderText = table.ContentTable.Columns[i].Caption;
                    colModel.ColumnAlignment = ColumnAlignments.Left;
                }
                else
                {
                    colModel = new ExcelTableColumnModel();
                    colModel.Height = 34;
                    colModel.Width = 40;
                    colModel.HeaderText = table.ContentTable.Columns[i].Caption.Substring(1);
                    colModel.ColumnAlignment = ColumnAlignments.Right;
                }
                colList.Add(colModel);
            }
            table.Column = colList;

            list.Add(table);

            MemoryStream ms = ExcelRender.RenderToExcel(list);

            return File(ms, "application/ms-excel", title + ".xls");
        }

        public FileResult RSDailyExportExcel(FormCollection f)
        {
            string source = f["hddData"];
            string title = f["hddTitle"];
            string begin = f["hddBegin"];

            Dictionary<string, DataTable> dic = new Dictionary<string, DataTable>();

            List<RSDailyModel> list = Newtonsoft.Json.JsonConvert.DeserializeObject<List<RSDailyModel>>(source);

            string createtime = string.Empty;
            List<string> strlist = new List<string>() { "编号", "品名", "正常", "重污", "返洗", "过水", "发货" };

            for (int i = 0; i < list.Count; i++)
            {
                if (string.IsNullOrEmpty(createtime))
                {
                    createtime = list[i].CreateTime;
                }

                DataTable table = ListToDataTable(list[i].Data);
                for (int j = 0; j < table.Columns.Count; j++)
                {
                    table.Columns[j].ColumnName = strlist[j];
                }
                if (!dic.Keys.Contains(list[i].ShortName))
                {
                    dic.Add(list[i].ShortName, table);
                }
            }

            if (dic.Count > 0)
            {
                MemoryStream ms1 = ExcelRender.ReanderToExcel(dic, createtime);

                return File(ms1, "application/ms-excel", "SFD.xls");
            }
            else
            {
                return File(new MemoryStream(), "application/ms-excel", "SFD.xls");
            }
        }

        private DataTable ListToDataTable(IList list)
        {
            DataTable result = new DataTable();
            if (list.Count > 0)
            {
                PropertyInfo[] propertys = list[0].GetType().GetProperties();
                foreach (PropertyInfo pi in propertys)
                {
                    //获取类型
                    Type colType = pi.PropertyType;
                    //当类型为Nullable<>时
                    if ((colType.IsGenericType) && (colType.GetGenericTypeDefinition() == typeof(Nullable<>)))
                    {
                        colType = colType.GetGenericArguments()[0];
                    }
                    result.Columns.Add(pi.Name, colType);
                }
                for (int i = 0; i < list.Count; i++)
                {
                    ArrayList tempList = new ArrayList();
                    foreach (PropertyInfo pi in propertys)
                    {
                        object obj = pi.GetValue(list[i], null);
                        tempList.Add(obj);
                    }
                    object[] array = tempList.ToArray();
                    result.LoadDataRow(array, true);
                }
            }
            return result;
        }

        #endregion
    }
}