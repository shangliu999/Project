using ETexsys.APIRequestModel.Request;
using ETexsys.APIRequestModel.Response;
using Etextsys.Terminal.Domain;
using ETextsys.Terminal.DAL;
using ETextsys.Terminal.Domain;
using ETextsys.Terminal.Model.Business;
using ETextsys.Terminal.Model.Choose;
using ETextsys.Terminal.Utilities;
using ETextsys.Terminal.Utilities.PrintBase;
using ETextsys.Terminal.View.Business;
using ETextsys.Terminal.View.Choose;
using ETextsys.Terminal.ViewModel.Choose;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;

namespace ETextsys.Terminal.ViewModel.Business
{
    public class BillInquiry02ViewModel
    {
        Action _closeAction;

        string CreateTime;

        string PrintInvTypeName;

        int Total;

        private BillInquiry02Model model;
        public BillInquiry02Model Model
        {
            get { return model; }
            set { model = value; }
        }

        private RelayCommand<object> print;
        public ICommand Print
        {
            get
            {
                if (print == null)
                {
                    print = new RelayCommand<object>(PrintAction);
                }
                return print;
            }
        }
        public void PrintAction(object parameter)
        {
            switch (model.InvTypeName)
            {
                case "污物送洗单":
                    PrintInvTypeName = "污物送洗单汇总";
                    break;
                case "净物配送单":
                    PrintInvTypeName = "净物配送单汇总";
                    break;
                case "入库单":
                    PrintInvTypeName = "入库单汇总";
                    break;
                case "出库单":
                    PrintInvTypeName = "出库单汇总";
                    break;
                case "入厂":
                    PrintInvTypeName = "入厂汇总";
                    break;
                case "订单":
                    PrintInvTypeName = "订单汇总";
                    break;
                case "退回":
                    PrintInvTypeName = "退回汇总";
                    break;
                case "工厂返洗":
                    PrintInvTypeName = "工厂返洗汇总";
                    break;
            }
            model.WaitContent = "正在打印...";
            model.WaitVisibled = "Visible";
            PrintQueue pq = new PrintQueue();
            PrintAttachment att = null;
            int _printCount = ConfigController.BusinessSettingConfig.OtherPrintCount;
            int _printPaper = ConfigController.SystemSettingConfig.SelectPrintPaper;
            List<TableColumnHeaderModel> tableAttr = GetPrintTableAttr();
            DataTable _printTable = CreatePrintTable();

            var query = from t in model.ResetTable
                        group t by new
                        {
                            t.ProductName,
                            t.Size
                        } into m
                        select new
                        {
                            croductName = m.Key.ProductName,
                            size = m.Key.Size,
                            number = m.Sum(v => v.Number)
                        };
            DataRow row = null;
            query.ToList().ForEach(q =>
            {
                row = _printTable.NewRow();
                row["ProductName"] = q.croductName;
                row["Size"] = q.size;
                row["Number"] = q.number;
                Total += q.number;
                _printTable.Rows.Add(row);
            });

            for (int i = 0; i < _printCount; i++)
            {
                att = new PrintAttachment();
                att.Title = PrintInvTypeName;
                att.PrintTime = model.CreateTime;
                //att.HandlerName = App.CurrentLoginUser.UName;
                att.PrintType = 1;
                att.PaperType = _printPaper;
                att.TableColumns = tableAttr;
                att.Total = Total;
                att.PrintDataTable = _printTable;
                pq.Add(att);
            }
            pq.Print();
            model.WaitVisibled = "Hidden";
        }

        private RelayCommand<DataGrid> selectBtn;
        public ICommand SelectBtn
        {
            get
            {
                if (selectBtn == null)
                {
                    selectBtn = new RelayCommand<DataGrid>(SelectBtnAction);
                }
                return selectBtn;
            }
        }
        public async void SelectBtnAction(DataGrid parameter)
        {
            if (model.InvTypeName == null)
            {
                EtexsysMessageBox.Show("提示", "请选择单据类型.", MessageBoxButton.OK, MessageBoxImage.Information);
                return;
            }
            model.WaitContent = "正在加载...";
            model.WaitVisibled = "Visible";
            if (parameter.Items.Count != 0)
            {
                model.ResetTable.Clear();
            }
            SummaryParamModel summary = new SummaryParamModel();
            summary.InvType = model.InvType;
            summary.CreateTime = Convert.ToDateTime(model.CreateTime);
            summary.UUID = ConfigController.MacCode;
            summary.TimeStamp = ApiController.Instance.GetTimeStamp();
            summary.TerminalType = ConfigController.TerminalType;
            var apiRtn = await ApiController.Instance.DoPost(ApiController.Instance.Summary, summary);
            if (apiRtn != null)
            {
                var temp = JsonConvert.DeserializeObject<List<ResponseSummary>>(apiRtn.Result.ToString());
                resposparameter respos = new resposparameter();
                var query = from t in temp
                            select t;
                query.ToList().ForEach(q =>
                {
                    respos = new resposparameter();
                    respos.Number = q.Number;
                    respos.ProductName = q.ProductName;
                    respos.Size = q.Size;
                    model.ResetTable.Add(respos);
                });
            }
            if (parameter.Items.Count != 0)
            {
                model.IsEnabled = "true";
            }
            if (parameter.Items.Count == 0)
            {
                model.IsEnabled = "false";
            }
            model.WaitVisibled = "Hidden";
        }

        private RelayCommand<object> getTime;
        public ICommand GetTime
        {
            get
            {
                if (getTime == null)
                {
                    getTime = new RelayCommand<object>(GetTimeAction);
                }
                return getTime;
            }
        }
        public void GetTimeAction(object paramte)
        {
            ETextsys.Terminal.View.Business.Calendar calendar = new ETextsys.Terminal.View.Business.Calendar();
            System.Windows.Controls.Calendar a = new System.Windows.Controls.Calendar();
            CalendarViewModel calendarViewModel = calendar.DataContext as CalendarViewModel;
            calendar.DataContext = calendarViewModel;
            calendar.ShowDialog();
            if (calendarViewModel.Model.Time != null)
            {
                model.CreateTime = calendarViewModel.Model.Time;
            }
        }

        private RelayCommand<object> getType;
        public ICommand GetType
        {
            get
            {
                if (getType == null)
                {
                    getType = new RelayCommand<object>(GetTypeAction);
                }
                return getType;
            }
        }
        public void GetTypeAction(object paramte)
        {
            ObservableCollection<ChooseModel> list = new ObservableCollection<Terminal.Model.Choose.ChooseModel>();
            list.Add(new ChooseModel() { ChooseID = 1, ChooseName = "污物送洗单" });
            list.Add(new ChooseModel() { ChooseID = 2, ChooseName = "净物配送单" });
            list.Add(new ChooseModel() { ChooseID = 3, ChooseName = "入库单" });
            list.Add(new ChooseModel() { ChooseID = 4, ChooseName = "出库单" });
            list.Add(new ChooseModel() { ChooseID = 5, ChooseName = "入厂" });
            list.Add(new ChooseModel() { ChooseID = 6, ChooseName = "订单" });
            list.Add(new ChooseModel() { ChooseID = 7, ChooseName = "退回" });

            string title = "单据查询";
            DownModal model = new DownModal();
            DownModalViewModel modelModel = new DownModalViewModel(model.Close);
            modelModel.Model.ChooseList = list;
            modelModel.Model.Title = title;
            model.DataContext = modelModel;
            model.ShowDialog();
            if (modelModel.ChooseItem != null)
            {
                this.model.InvType = modelModel.ChooseItem.ChooseID;
                this.model.InvTypeName = modelModel.ChooseItem.ChooseName;
            }

        }

        private RelayCommand<object> close;
        public ICommand Close
        {
            get
            {
                if (close == null)
                {
                    close = new RelayCommand<object>(CloseAction);
                }
                return close;
            }
        }
        public void CloseAction(object parameter)
        {
            App.Current.Dispatcher.Invoke(() => { _closeAction.Invoke(); });
        }

        public BillInquiry02ViewModel(Action closeAction)
        {
            this._closeAction = closeAction;
            model = new BillInquiry02Model()
            {
                IsEnabled = "False",
                CreateTime = DateTime.Now.ToString("yyyy-MM-dd"),
                WaitVisibled = "Hidden"
            };
            model.ResetTable = new ObservableCollection<resposparameter>();
        }

        private List<TableColumnHeaderModel> GetPrintTableAttr()
        {
            int _printPaper = ConfigController.SystemSettingConfig.SelectPrintPaper;
            List<TableColumnHeaderModel> tableAttr = new List<TableColumnHeaderModel>();
            TableColumnHeaderModel tableModel = null;
            if (_printPaper == 1)
            {
                tableModel = new TableColumnHeaderModel();
                tableModel.Name = "名称";
                tableModel.Alignment = ColumnHAlignment.Left;
                tableModel.Width = 80;
                tableAttr.Add(tableModel);

                tableModel = new TableColumnHeaderModel();
                tableModel.Name = "尺寸";
                tableModel.Alignment = ColumnHAlignment.Left;
                tableModel.Width = 60;
                tableAttr.Add(tableModel);

                tableModel = new TableColumnHeaderModel();
                tableModel.Name = "数量";
                tableModel.Alignment = ColumnHAlignment.Right;
                tableModel.Width = 50;
                tableAttr.Add(tableModel);
            }
            else
            {
                tableModel = new TableColumnHeaderModel();
                tableModel.Name = "名称";
                tableModel.Alignment = ColumnHAlignment.Left;
                tableModel.Width = 120;
                tableAttr.Add(tableModel);

                tableModel = new TableColumnHeaderModel();
                tableModel.Name = "尺寸";
                tableModel.Alignment = ColumnHAlignment.Left;
                tableModel.Width = 100;
                tableAttr.Add(tableModel);

                tableModel = new TableColumnHeaderModel();
                tableModel.Name = "数量";
                tableModel.Alignment = ColumnHAlignment.Right;
                tableModel.Width = 60;
                tableAttr.Add(tableModel);
            }
            return tableAttr;
        }

        private DataTable CreatePrintTable()
        {
            DataTable _printTable = new DataTable();

            DataColumn col = new DataColumn();
            col.DataType = typeof(string);
            col.ColumnName = "ProductName";
            col.DefaultValue = string.Empty;
            _printTable.Columns.Add(col);

            col = new DataColumn();
            col.DataType = typeof(string);
            col.ColumnName = "Size";
            col.DefaultValue = string.Empty;
            _printTable.Columns.Add(col);

            col = new DataColumn();
            col.DataType = typeof(int);
            col.ColumnName = "Number";
            col.DefaultValue = 0;
            _printTable.Columns.Add(col);

            return _printTable;
        }

    }
}
